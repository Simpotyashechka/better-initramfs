#!/bin/sh
# -*- mode: shell-script; coding: utf-8-emacs-unix; sh-basic-offset: 8; indent-tabs-mode: t -*-
# This code is under Simplified BSD License, see LICENSE for more info
# Copyright (c) 2010, Piotr Karbowski
# All rights reserved.

#set -e # exit on >0.
#set -x # debug

# Load functions.
. /functions.sh

# Prepare dirs
run dodir /dev /newroot /sbin /proc /sys /etc /var/log /var/run
[ -d /lib ] && run ln -s /lib /lib64
[ -d /usr/lib ] && run ln -s /usr/lib /usr/lib64

# Basic /dev content, we need it as fast as possible.
[ ! -e /dev/console ]	&& run mknod /dev/console c 5 1
[ ! -e /dev/null ]	&& run mknod /dev/null c 1 3
[ ! -e /dev/tty ]	&& run mknod /dev/tty c 5 0
[ ! -e /dev/urandom ]	&& run mknod /dev/urandom c 1 9
[ ! -e /dev/random ]	&& run mknod /dev/random c 1 8
[ ! -e /dev/zero ]	&& run mknod /dev/zero c 1 5

# Clear the screen
clear

# Default values.
luks=false
lvm=false
rescueshell=false
tuxonice=false
mdev_fallback=false
rootdelay=false

# Config.
if [ -f /config ]; then . /config; fi

# Basic
kernelver="$(uname -r)"
ver="$(cat /VERSION)"

einfo "better-initramfs v${ver}"
einfo "kernel ${kernelver}\n"

einfo "Mounting /proc"
run mount -t proc proc /proc

# Disable kernel messages from popping onto the screen
echo 0 > /proc/sys/kernel/printk

einfo "Mounting /sys"
run mount -t sysfs sysfs /sys

# Process command line options
for i in $(cat /proc/cmdline); do
	case "${i}" in
		root\=*)
			root=$(get_opt $i)
		;;
		init\=*)
			init=$(get_opt $i)
		;;
		enc_root\=*)
			enc_root=$(get_opt $i)
		;;
		luks)
			luks=true
		;;
		lvm)
			lvm=true
		;;
		rescueshell)
			rescueshell=true
		;;
		tuxonice)
			tuxonice=true
		;;
		resume\=*)
			resume=$(get_opt $i)
		;;
		rootfstype\=*)
			rootfstype=$(get_opt $i)
		;;
		rootdelay\=*)
			rootdelay=$(get_opt $i)
		;;
	esac
done

einfo "Create all the symlinks to /bin/busybox."
run busybox --install -s

if [ $rootdelay != "false" ]; then
	if [ $rootdelay -gt 0 2>/dev/null ]; then
		einfo "Waiting $(get_opt $rootdelay)s (rootdelay)"
		run sleep $(get_opt $rootdelay)
	else
		ewarn "\$rootdelay variable must be numeric and greater than zero. Skipping rootdelay."
	fi
fi

einfo "Initiating /dev (devtmpfs)."
if ! mount -t devtmpfs devtmpfs /dev 2>/dev/null; then
	ewarn "Unable to mount devtmpfs, missing CONFIG_DEVTMPFS? Switching to busybox's mdev."
	mdev_fallback="true"

	einfo "Initiating /dev (mdev)."
	run touch /etc/mdev.conf # Do we really need this empty file?
	run echo /sbin/mdev > /proc/sys/kernel/hotplug
	run mdev -s
fi

if [ -z $init ]; then init="/sbin/init"; fi
if [ -z $root ]; then eerror "\$root variable is empty. This is fatal."; fi
if [ $lvm = "true" ]; then run dolvm; fi

if [ $luks = "true" ]; then
	if [ ! -f /bin/cryptsetup ]; then
		eerror "There is no cryptsetup binary into initramfs image."
		droptoshell
	fi

	if [ -z $enc_root ]; then
		eerror "You have enabled luks but your \$enc_root variable is empty."
		droptoshell
	fi
	
	einfo "Opening encrypted partition and mapping to /dev/mapper/enc_root."
	# Resolve possible UUID or LABEL of enc_root now, after getting lvm up.
	enc_root="$(get_device $enc_root)"
	if [ -z $enc_root ]; then
        	eerror "\$enc_root variable is empty. Wrong UUID/LABEL?"
	        droptoshell
	fi

	# Hack for cryptsetup which trying to run /sbin/udevadm.
	run echo -e "#!/bin/sh\nexit 0" > /sbin/udevadm
	run chmod 755 /sbin/udevadm

	run cryptsetup luksOpen "${enc_root}" enc_root
	if [ $lvm = "true" ]; then dolvm; fi
fi

if [ $rescueshell = "true" ]; then droptoshell; fi

if [ $tuxonice = "true" ]; then
	if [ ! -z $resume ]; then
		if [ ! -f /sys/power/tuxonice/do_resume ]; then
			ewarn "Your kernel do not support TuxOnIce.";
		else
			einfo "Sending do_resume signal to TuxOnIce."
			run echo 1 > /sys/power/tuxonice/do_resume
		fi
	else
		ewarn "resume= variable is empty, not cool, skipping tuxonice."
	fi
fi

# Mount the root device
mountparams="-o ro"

if [ ! -z $rootfstype ]; then mountparams="$mountparams -t $rootfstype"; fi

einfo "Mounting rootfs to /newroot."
# Resolve $root now, after getting up lvm and dmcrypt (and lvm ;p).
root=$(get_device $root)
if [ -z $root ]; then
	eerror "\$root variable is empty. Wrong UUID/LABEL?"
	droptoshell
fi

run mount $mountparams "${root}" /newroot

einfo "Unmounting /sys and /proc."
run umount /sys /proc

if [ $mdev_fallback = "false" ]; then
	einfo "Unmounting /dev."
	run umount /dev
fi


#Switch to the new root and execute init
if [[ -x "/newroot/${init}" ]] ; then
	einfo "Switching root to /newroot and executing /sbin/init."
	exec switch_root /newroot "${init}"
fi

ewarn "Something goes wrong."
droptoshell
