#!/bin/bash
# better-initramfs project
# https://bitbucket.org/piotrkarbowski/better-initramfs
# Copyright (c) 2010-2013, Piotr Karbowski <piotr.karbowski@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#    * Neither the name of the Piotr Karbowski nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE

scriptpath="$(readlink -f $0)"
workdir="${scriptpath%/*}"
bootstrap="${workdir}/../bootstrap"
sourceroot="${workdir}/../sourceroot"

die() {
	echo -e "\033[1;30m>\033[0;31m>\033[1;31m> ERROR:\033[0m ${@}" && exit 1
}

einfo() {
	echo -ne "\033[1;30m>\033[0;36m>\033[1;36m> \033[0m${@}\n"
}
ewarn() {
	echo -ne "\033[1;30m>\033[0;33m>\033[1;33m> \033[0m${@}\n"
}

# Get version.
git_tag="$(git describe --tags --exact-match HEAD 2> /dev/null)"
git_branch="$(git symbolic-ref HEAD 2>/dev/null)"
if [ -z "${git_branch}" ]; then die "Not under git?"; fi
git_branch="${git_branch##*/}"

if [ "${git_branch}" = 'master' ] && [ -n "${git_tag}" ]; then
	version="${git_tag}"
else
	git_latestcommit="$(git log -1 --date='short' --format='%h-%ad')"
	version="${git_branch}-${git_latestcommit}"
fi

echo "${version}" > "${sourceroot}/VERSION"

einfo "better-initramfs ${version}"

prepare() {
	einfo "Deploying bootstraped binaries into source root ..."
	cd "${bootstrap}/output" || die "Failed to cd into bootstrap/output/"
	if test -f busybox; then
		cp busybox "${sourceroot}/bin/busybox"
		( cd "${sourceroot}/bin/" && rm -f sh && ln -s busybox sh )
	else
		die "No busybox binary found."
	fi

	if test -f cryptsetup.static; then
		cp cryptsetup.static "${sourceroot}/bin/cryptsetup"
	else
		ewarn "No cryptsetup binary found, DMCrypt LUKS support will be disabled."
	fi

	if test -f askpass; then
		cp askpass "${sourceroot}/bin/askpass"
	else
		ewarn "No askpass found, LUKS support will not work if sshd is enabled."
	fi

	if test -f lvm.static; then
		cp lvm.static "${sourceroot}/bin/lvm"
	else
		ewarn "No lvm binary found, LVM support will be disabled."
	fi

	if test -f mdadm.static; then
		cp mdadm.static "${sourceroot}/bin/mdadm"
	else
		ewarn "No mdadm binary found, Software Raid support will be disabled."
	fi

	if test -f dropbearmulti; then
		cp dropbearmulti "${sourceroot}/bin/dropbearmulti"
		( cd "${sourceroot}/bin/" && rm -f dropbear dropbearkey && ln -s dropbearmulti dropbear && ln -s dropbearmulti dropbearkey )
	else
		ewarn "No dropbearmulti binary found, Remote rescue shell support will be disabled."
	fi

	if test -f resume; then
		cp resume "${sourceroot}/bin/resume"
	else
		ewarn "No resume binary found, Swsusp will be disabled."
	fi
}

image() {
	if ! [ -f "${sourceroot}/bin/busybox" ]; then die "Initramfs will not work without busybox."; fi

	einfo 'Building image...'

	( cd "${sourceroot}" && find . | cpio --quiet -H newc -o | gzip -9 > ../output/initramfs.cpio.gz)

	if [ -f "${sourceroot}/../output/initramfs.cpio.gz" ]; then
		einfo "output/initramfs.cpio.gz is ready."
	else
		die "There is no initramfs.cpio.gz, something goes wrong."
	fi
}


case $1 in
	prepare|image|clean)
		$1
	;;
	all)
		echo
		einfo "Quickstart:"
		echo
		echo "	bootstrap/bootstrap-all"
		echo "	make prepare"
		echo "	make image"
		echo
		exit 1
	;;
esac
